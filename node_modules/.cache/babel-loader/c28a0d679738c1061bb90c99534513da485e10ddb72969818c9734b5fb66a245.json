{"ast":null,"code":"var _jsxFileName = \"/Users/owner/Documents/SPRINGBOARD/Projects/react-jokes-classes/src/JokeList.js\",\n  _s = $RefreshSig$();\nimport React, { Component, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\n/** List of jokes. */\n\n// class JokeList extends Component {\n//   static defaultProps = {\n//     numJokesToGet: 5\n//   };\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       jokes: [],\n//       isLoading: true\n//     };\n\n//     this.generateNewJokes = this.generateNewJokes.bind(this);\n//     this.vote = this.vote.bind(this);\n//   }\n\n//   /* at mount, get jokes */\n\n//   componentDidMount() {\n//     this.getJokes();\n//   }\n\n//   /* retrieve jokes from API */\n\n//   async getJokes() {\n//     try {\n//       // load jokes one at a time, adding not-yet-seen jokes\n//       let jokes = [];\n//       let seenJokes = new Set();\n\n//       while (jokes.length < this.props.numJokesToGet) {\n//         let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//           headers: { Accept: \"application/json\" }\n//         });\n//         let { ...joke } = res.data;\n\n//         if (!seenJokes.has(joke.id)) {\n//           seenJokes.add(joke.id);\n//           jokes.push({ ...joke, votes: 0 });\n//         } else {\n//           console.log(\"duplicate found!\");\n//         }\n//       }\n\n//       this.setState({ jokes, isLoading: false });\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   }\n\n//   /* empty joke list, set to loading state, and then call getJokes */\n\n//   generateNewJokes() {\n//     this.setState({ isLoading: true});\n//     this.getJokes();\n//   }\n\n//   /* change vote for this id by delta (+1 or -1) */\n\n//   vote(id, delta) {\n//     this.setState(st => ({\n//       jokes: st.jokes.map(j =>\n//         j.id === id ? { ...j, votes: j.votes + delta } : j\n//       )\n//     }));\n//   }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   render() {\n//     let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n//     if (this.state.isLoading) {\n//       return (\n//         <div className=\"loading\">\n//           <i className=\"fas fa-4x fa-spinner fa-spin\" />\n//         </div>\n//       )\n//     }\n\n//     return (\n//       <div className=\"JokeList\">\n//         <button\n//           className=\"JokeList-getmore\"\n//           onClick={this.generateNewJokes}\n//         >\n//           Get New Jokes\n//         </button>\n\n//         {sortedJokes.map(j => (\n//           <Joke\n//             text={j.joke}\n//             key={j.id}\n//             id={j.id}\n//             votes={j.votes}\n//             vote={this.vote}\n//           />\n//         ))}\n//       </div>\n//     );\n//   }\n// }\n\n// export default JokeList;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JokeList = (numJokesToGet = 5) => {\n  _s();\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [vote, setVote] = useState(0);\n\n  /* retrieve jokes from API */\n\n  useEffect(() => {\n    const getJokes = async () => {\n      try {\n        // load jokes one at a time, adding not-yet-seen jokes\n        setJokes([]);\n        let seenJokes = new Set();\n        while (jokes.length < numJokesToGet) {\n          setIsLoading(true);\n          let res = await axios.get(\"https://icanhazdadjoke.com\", {\n            headers: {\n              Accept: \"application/json\"\n            }\n          });\n          let {\n            ...joke\n          } = res.data;\n          if (!seenJokes.has(joke.id)) {\n            seenJokes.add(joke.id);\n            jokes.push({\n              ...joke,\n              votes: 0\n            });\n          } else {\n            console.log(\"duplicate found!\");\n          }\n        }\n        setIsLoading(false);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    getJokes();\n  });\n\n  /* empty joke list, set to loading state, and then call getJokes */\n\n  // generateNewJokes() {\n  //   this.setState({ isLoading: true});\n  //   this.getJokes();\n  // }\n\n  /* change vote for this id by delta (+1 or -1) */\n\n  // vote(id, delta) {\n  //   this.setState(st => ({\n  //     jokes: st.jokes.map(j =>\n  //       j.id === id ? { ...j, votes: j.votes + delta } : j\n  //     )\n  //   }));\n  // }\n\n  /* render: either loading spinner or list of sorted jokes. */\n\n  // render() {\n  //   let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n  //   if (this.state.isLoading) {\n  //     return (\n  //       <div className=\"loading\">\n  //         <i className=\"fas fa-4x fa-spinner fa-spin\" />\n  //       </div>\n  //     )\n  //   }\n\n  const showLoadingSpinner = () => {\n    if (isLoading === true) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-4x fa-spinner fa-spin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"JokeList\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: showLoadingSpinner()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"JokeList-getmore\",\n      onClick: this.generateNewJokes,\n      children: \"Get New Jokes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this), jokes.map(j => /*#__PURE__*/_jsxDEV(Joke, {\n      text: j.joke,\n      id: j.id,\n      votes: j.votes,\n      vote: this.vote\n    }, j.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 7\n  }, this);\n};\n_s(JokeList, \"X5tqfKrW9Pi+CUIltQC2XjZrs3Q=\");\n_c = JokeList;\nexport default JokeList;\nvar _c;\n$RefreshReg$(_c, \"JokeList\");","map":{"version":3,"names":["React","Component","useState","useEffect","axios","Joke","jsxDEV","_jsxDEV","JokeList","numJokesToGet","_s","jokes","setJokes","isLoading","setIsLoading","vote","setVote","getJokes","seenJokes","Set","length","res","get","headers","Accept","joke","data","has","id","add","push","votes","console","log","err","error","showLoadingSpinner","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","generateNewJokes","map","j","text","_c","$RefreshReg$"],"sources":["/Users/owner/Documents/SPRINGBOARD/Projects/react-jokes-classes/src/JokeList.js"],"sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\n/** List of jokes. */\n\n// class JokeList extends Component {\n//   static defaultProps = {\n//     numJokesToGet: 5\n//   };\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       jokes: [],\n//       isLoading: true\n//     };\n\n//     this.generateNewJokes = this.generateNewJokes.bind(this);\n//     this.vote = this.vote.bind(this);\n//   }\n\n//   /* at mount, get jokes */\n\n//   componentDidMount() {\n//     this.getJokes();\n//   }\n\n//   /* retrieve jokes from API */\n\n//   async getJokes() {\n//     try {\n//       // load jokes one at a time, adding not-yet-seen jokes\n//       let jokes = [];\n//       let seenJokes = new Set();\n\n//       while (jokes.length < this.props.numJokesToGet) {\n//         let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//           headers: { Accept: \"application/json\" }\n//         });\n//         let { ...joke } = res.data;\n\n//         if (!seenJokes.has(joke.id)) {\n//           seenJokes.add(joke.id);\n//           jokes.push({ ...joke, votes: 0 });\n//         } else {\n//           console.log(\"duplicate found!\");\n//         }\n//       }\n\n//       this.setState({ jokes, isLoading: false });\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   }\n\n//   /* empty joke list, set to loading state, and then call getJokes */\n\n//   generateNewJokes() {\n//     this.setState({ isLoading: true});\n//     this.getJokes();\n//   }\n\n//   /* change vote for this id by delta (+1 or -1) */\n\n//   vote(id, delta) {\n//     this.setState(st => ({\n//       jokes: st.jokes.map(j =>\n//         j.id === id ? { ...j, votes: j.votes + delta } : j\n//       )\n//     }));\n//   }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   render() {\n//     let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n//     if (this.state.isLoading) {\n//       return (\n//         <div className=\"loading\">\n//           <i className=\"fas fa-4x fa-spinner fa-spin\" />\n//         </div>\n//       )\n//     }\n\n//     return (\n//       <div className=\"JokeList\">\n//         <button\n//           className=\"JokeList-getmore\"\n//           onClick={this.generateNewJokes}\n//         >\n//           Get New Jokes\n//         </button>\n\n//         {sortedJokes.map(j => (\n//           <Joke\n//             text={j.joke}\n//             key={j.id}\n//             id={j.id}\n//             votes={j.votes}\n//             vote={this.vote}\n//           />\n//         ))}\n//       </div>\n//     );\n//   }\n// }\n\n// export default JokeList;\n\n\n\n\n\n\n\n\n\n\n\n\nconst JokeList = (numJokesToGet = 5) => {\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [vote, setVote] = useState(0);\n\n  /* retrieve jokes from API */\n\n  useEffect(() => {\n    const getJokes = async() => {\n      try {\n        // load jokes one at a time, adding not-yet-seen jokes\n        setJokes([]);\n        let seenJokes = new Set();\n  \n        while (jokes.length < numJokesToGet) {\n          setIsLoading(true);\n          let res = await axios.get(\"https://icanhazdadjoke.com\", {\n            headers: { Accept: \"application/json\" }\n          });\n          let { ...joke } = res.data;\n  \n          if (!seenJokes.has(joke.id)) {\n            seenJokes.add(joke.id);\n            jokes.push({ ...joke, votes: 0 });\n          } else {\n            console.log(\"duplicate found!\");\n          }\n        }\n\n        setIsLoading(false);\n\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    getJokes();\n  })\n  \n\n  /* empty joke list, set to loading state, and then call getJokes */\n\n  // generateNewJokes() {\n  //   this.setState({ isLoading: true});\n  //   this.getJokes();\n  // }\n\n  /* change vote for this id by delta (+1 or -1) */\n\n  // vote(id, delta) {\n  //   this.setState(st => ({\n  //     jokes: st.jokes.map(j =>\n  //       j.id === id ? { ...j, votes: j.votes + delta } : j\n  //     )\n  //   }));\n  // }\n\n  /* render: either loading spinner or list of sorted jokes. */\n\n  // render() {\n  //   let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n  //   if (this.state.isLoading) {\n  //     return (\n  //       <div className=\"loading\">\n  //         <i className=\"fas fa-4x fa-spinner fa-spin\" />\n  //       </div>\n  //     )\n  //   }\n\n  const showLoadingSpinner = () => {\n    if(isLoading === true){\n      return (\n        <div className=\"loading\">\n         <i className=\"fas fa-4x fa-spinner fa-spin\" />\n       </div>\n      )\n    }\n  }\n\n    return (\n      <div className=\"JokeList\">\n        <div>\n          {showLoadingSpinner()}\n        </div>\n        <button\n          className=\"JokeList-getmore\"\n          onClick={this.generateNewJokes}\n        >\n          Get New Jokes\n        </button>\n\n        {jokes.map(j => (\n          <Joke\n            text={j.joke}\n            key={j.id}\n            id={j.id}\n            votes={j.votes}\n            vote={this.vote}\n          />\n        ))}\n      </div>\n    );\n}\n\nexport default JokeList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}