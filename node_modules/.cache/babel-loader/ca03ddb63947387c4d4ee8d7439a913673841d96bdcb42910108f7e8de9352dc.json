{"ast":null,"code":"var _jsxFileName = \"/Users/owner/Documents/SPRINGBOARD/Projects/react-jokes-classes/src/JokeList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JokeList = ({\n  numJokesToGet = 5\n}) => {\n  _s();\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [voteLeaderboard, setVoteLeaderboard] = useState([]);\n  const generateNewJokes = () => {\n    setJokes([]);\n    setIsLoading(true);\n  };\n  useEffect(() => {\n    const getJokes = async () => {\n      try {\n        let seenJokes = new Set();\n        while (jokes.length < numJokesToGet) {\n          let res = await axios.get(\"https://icanhazdadjoke.com\", {\n            headers: {\n              Accept: \"application/json\"\n            }\n          });\n          let {\n            ...joke\n          } = res.data;\n          if (!seenJokes.has(joke.id)) {\n            seenJokes.add(joke.id);\n            jokes.push({\n              ...joke\n            });\n          } else {\n            console.log(\"duplicate found!\");\n          }\n        }\n        setIsLoading(false);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    getJokes();\n  }, [generateNewJokes]);\n  const showLoadingSpinner = () => {\n    if (isLoading === true) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-4x fa-spinner fa-spin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  const storeVoteLeaderboardValues = (id, vote) => {\n    setVoteLeaderboard(v => {\n      console.log(v, 'votes');\n      console.log(v.vote, 'v.vote');\n      if (v.id === id) {\n        console.log('IDS EQUAL');\n        v.vote = vote;\n      } else {\n        console.log('IDS not equaL');\n        return [...votes, {\n          id,\n          vote\n        }];\n      }\n    });\n    return voteLeaderboard;\n  };\n  const updateVotingLeaderboard = (id, votes) => {\n    // console.log(id, votes, 'id, votes')\n    // console.log(jokes, 'jokes')\n    // console.log(votes, 'THIS IS VOTES VALUE IN JOKELIST')\n    storeVoteLeaderboardValues(id, votes);\n    console.log(voteLeaderboard, 'VOTELEADERBOARD');\n    // jokes.forEach((j) => {\n    //   if(j.id === id){\n\n    //   }\n    // })\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"JokeList\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"JokeList-getmore\",\n      onClick: () => generateNewJokes(),\n      children: \"Get New Jokes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: showLoadingSpinner()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), jokes.map(j => /*#__PURE__*/_jsxDEV(Joke, {\n      text: j.joke,\n      id: j.id,\n      updateVotingLeaderboard: updateVotingLeaderboard,\n      storeVoteLeaderboardValues: storeVoteLeaderboardValues\n    }, j.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 7\n  }, this);\n};\n_s(JokeList, \"xUDO4kk3COEKh7htW0e+6gvr3O0=\");\n_c = JokeList;\nexport default JokeList;\nvar _c;\n$RefreshReg$(_c, \"JokeList\");","map":{"version":3,"names":["React","useState","useEffect","axios","Joke","jsxDEV","_jsxDEV","JokeList","numJokesToGet","_s","jokes","setJokes","isLoading","setIsLoading","voteLeaderboard","setVoteLeaderboard","generateNewJokes","getJokes","seenJokes","Set","length","res","get","headers","Accept","joke","data","has","id","add","push","console","log","err","error","showLoadingSpinner","className","children","fileName","_jsxFileName","lineNumber","columnNumber","storeVoteLeaderboardValues","vote","v","votes","updateVotingLeaderboard","onClick","map","j","text","_c","$RefreshReg$"],"sources":["/Users/owner/Documents/SPRINGBOARD/Projects/react-jokes-classes/src/JokeList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\nconst JokeList = ({numJokesToGet = 5}) => {\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [voteLeaderboard, setVoteLeaderboard] = useState([]);\n\n  const generateNewJokes = () => {\n    setJokes([]);\n    setIsLoading(true);\n  }\n\n  useEffect(() => {\n    const getJokes = async() => {\n      try {\n        let seenJokes = new Set();\n        while (jokes.length < numJokesToGet) {\n          let res = await axios.get(\"https://icanhazdadjoke.com\", {\n            headers: { Accept: \"application/json\" }\n          });\n          let { ...joke } = res.data;\n  \n          if (!seenJokes.has(joke.id)) {\n            seenJokes.add(joke.id);\n            jokes.push({ ...joke });\n          } else {\n            console.log(\"duplicate found!\");\n          }\n        }\n\n        setIsLoading(false);\n\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    getJokes();\n  }, [generateNewJokes])\n\n  const showLoadingSpinner = () => {\n    if(isLoading === true){\n      return (\n        <div className=\"loading\">\n         <i className=\"fas fa-4x fa-spinner fa-spin\" />\n       </div>\n      )\n    }\n  }\n\n  const storeVoteLeaderboardValues = (id, vote) => {\n    setVoteLeaderboard((v) => {\n      console.log(v, 'votes')\n      console.log(v.vote, 'v.vote')\n      if(v.id === id){\n        console.log('IDS EQUAL')\n        v.vote = vote; \n      } else {\n        console.log('IDS not equaL')\n        return [...votes, {id, vote}]\n      }\n    });\n    return voteLeaderboard;\n  }\n\n  const updateVotingLeaderboard = (id, votes) => {\n    // console.log(id, votes, 'id, votes')\n    // console.log(jokes, 'jokes')\n    // console.log(votes, 'THIS IS VOTES VALUE IN JOKELIST')\n    storeVoteLeaderboardValues(id, votes);\n    console.log(voteLeaderboard, 'VOTELEADERBOARD')\n    // jokes.forEach((j) => {\n    //   if(j.id === id){\n        \n    //   }\n    // })\n  }\n\n    return (\n      <div className=\"JokeList\">\n        <button\n          className=\"JokeList-getmore\"\n          onClick={() => generateNewJokes()}\n        >\n          Get New Jokes\n        </button>\n        <div>\n          {showLoadingSpinner()}\n        </div>\n\n        {jokes.map(j => (\n          <Joke\n            text={j.joke}\n            key={j.id}\n            id={j.id}\n            updateVotingLeaderboard={updateVotingLeaderboard}\n            storeVoteLeaderboardValues={storeVoteLeaderboardValues}\n          />\n        ))}\n      </div>\n    )\n}\n\nexport default JokeList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}